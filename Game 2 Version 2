// game 2 version 2 // some bugs // arrows fire with gravity but dont reach // still no timer // no continous enemy motion



let bow;
let target;
let arrows = [];
let score = 0;

function setup() {
  createCanvas(800, 800);
  bow = new Bow();
  target = new Target();
}

function draw() {
  background(255);
  bow.update();
  bow.show();
  target.show();
  target.update();
  
  for (let i = 0; i < arrows.length; i++) {
    arrows[i].update();
    arrows[i].show();
    if (arrows[i].hits(target)) {
      score += 1;
      arrows[i].remove();
      target = new Target();
    }
    if (arrows[i].offscreen()) {
      arrows[i].remove();
    }
  }
  
  textSize(24);
  fill(0);
  text("Score: " + score, 10, 30);
}

function keyPressed() {
  if (keyCode === 32) {
    let arrow = new Arrow(bow.x, bow.y, bow.angle);
    arrows.push(arrow);
  }
}

class Bow {
  constructor() {
    this.x = 50;
    this.y = height / 2;
    this.angle = 0;
  }
  
  update() {
    this.angle = atan2(mouseY - this.y, mouseX - this.x);
  }
  
  show() {
    push();
     translate(this.x, this.y+100);
    rotate(this.angle);
    rect(0, -10, 50, 20);
    pop();
  }
}

class Arrow {
  constructor(x, y, angle) {
    this.x = x;
    this.y = y;
    this.angle = angle;
    this.speed = 10;
    this.velocity = createVector(this.speed * cos(this.angle), this.speed * sin(this.angle));
    this.gravity = 0.1;
    this.time = 0;
    this.mass = 0.1;
    this.radius = 8;
  }
  
  update() {
    this.velocity.y += this.gravity * this.mass * this.time;
    this.x += this.velocity.x;
    this.y += this.velocity.y;
    this.time++;
  }
  
  show() {
    push();
     translate(this.x, this.y+100);
    rotate(this.angle);
    fill(255, 0, 0);
    triangle(0, 0, 30, 5, 30, -5);
    pop();
  }
  
  offscreen() {
    return (this.x > width || this.x < 0 || this.y > height || this.y < 0);
  }
  
  hits(target) {
    let d = dist(this.x, this.y, target.x, target.y);
    return (d < target.r);
  }
  
  remove() {
    arrows.splice(arrows.indexOf(this), 1);
  }
}

class Target {
  constructor() {
    this.x = width - 50;
    this.y = random(50, height - 50);
    this.r = 25;
  }
  
  update() {
    if (random(1) < 0.01) {
      this.y = random(50, height - 50);
    }
  }
  
  show() {
    fill(0, 255, 0);
    ellipse(this.x, this.y, this.r * 2);
  }
}
 
